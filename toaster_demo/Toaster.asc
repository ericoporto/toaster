// new module script

float _ta_game_speed;
float _ta_tick;

#define TSTR_HALF_PI 1.570796327
#define TSTR_DOUBLE_PI 6.283185307

enum _ToastStage {
  eToastBegin = 0, 
  eToastMiddle, 
  eToastEnd
};

enum ToastTweenEasingType {
  eToastEaseLinearTween,
  eToastEaseInSineTween,
  eToastEaseOutSineTween,
  eToastEaseInOutSineTween,
  eToastEaseInQuadTween,
  eToastEaseOutQuadTween,
  eToastEaseInOutQuadTween,
  eToastEaseInCubicTween,
  eToastEaseOutCubicTween,
  eToastEaseInOutCubicTween,
  eToastEaseInQuartTween,
  eToastEaseOutQuartTween,
  eToastEaseInOutQuartTween,
  eToastEaseInQuintTween,
  eToastEaseOutQuintTween,
  eToastEaseInOutQuintTween,
  eToastEaseInCircTween,
  eToastEaseOutCircTween,
  eToastEaseInOutCircTween,
  eToastEaseInExpoTween,
  eToastEaseOutExpoTween,
  eToastEaseInOutExpoTween,
  eToastEaseInBackTween,
  eToastEaseOutBackTween,
  eToastEaseInOutBackTween,
  eToastEaseInElasticTween,
  eToastEaseOutElasticTween,
  eToastEaseInOutElasticTween,
  eToastEaseInBounceTween,
  eToastEaseOutBounceTween,
  eToastEaseInOutBounceTween
};

struct _Toast {
  bool Available;
  Overlay* Overlay;
  DynamicSprite* Sprite;
  int Lifetime;
  float Elapsed;
  float Duration;
  float TotalDuration;
  float TweenFromY;
  _ToastStage Stage;
  import void Update();
};


float _toaster_tween_get_value(float elapsed, float duration, ToastTweenEasingType easingType) {
  float t = elapsed / duration;
  float b = 0.0;
  float c = 1.0;
  
  switch(easingType) {
    case eToastEaseLinearTween: return t; break;
    case eToastEaseInSineTween: return -c * Maths.Cos((t) * TSTR_HALF_PI) + c + b; break;
    case eToastEaseOutSineTween: return c * Maths.Sin((t) * TSTR_HALF_PI) + b; break;
    case eToastEaseInOutSineTween: return (-c*0.5) * (Maths.Cos(Maths.Pi*(t)) -1.0) + b; break;
    case eToastEaseInCubicTween: return c*Maths.RaiseToPower(t, 3.0) + b; break;
    case eToastEaseOutCubicTween: {
      float s = 1.0;
      if (FloatToInt(3.0, eRoundDown) % 2 == 0) {
        c = -c;
        s = -s;
      }
      t = t - 1.0;
      return c*(Maths.RaiseToPower(t, 3.0) + s) + b;
    } break;
    case eToastEaseInOutCubicTween: {
      t = t * 2.0;
      if (t < 1.0) return (c*0.5)*Maths.RaiseToPower(t, 3.0) + b;
      float s = 2.0;
      if (FloatToInt(3.0, eRoundDown) % 2 == 0) {
        c = -c;
        s = -2.0;
      }
      return (c*0.5)*(Maths.RaiseToPower(t - 2.0, 3.0) + s) + b;
    } break;
    case eToastEaseInQuadTween: return c*t*t + b; break;
    case eToastEaseOutQuadTween: t = t - 1.0; return -c*t*(t-2.0) + b; break;
    case eToastEaseInOutQuadTween: {
      t = t * 2.0;
      if (t < 1.0) return (c*0.5)*t*t + b;
      t = t - 1.0;
      return -(c*0.5)*(t*(t-2.0) - 1.0) + b;
    } break;
    case eToastEaseInExpoTween: {
      if (t == 0.0) return b;
      return c * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
    } break;
    case eToastEaseOutExpoTween: {
      if (t == 1.0) return b + c;
      return c * (-Maths.RaiseToPower(2.0, -10.0 * t) + 1.0) + b;
    } break;
    case eToastEaseInOutExpoTween: {
      if (t == 0.0) return b;
      if (t == 1.0) return b + c;
      t = t * 2.0;
      if (t < 1.0) return (c*0.5) * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
      t = t - 1.0;
      return (c*0.5) * (-Maths.RaiseToPower(2.0, -10.0 * t) + 2.0) + b;
    } break;
    case eToastEaseInCircTween: {
      t = t * 2.0;
      if (t < 1.0) return -c * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
      t = t - 2.0;
      return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
    } break;
    case eToastEaseOutCircTween: {
      t = t * 2.0 - 1.0;
      return c * Maths.Sqrt(1.0 - t*t) + b;
    } break;
    case eToastEaseInOutCircTween: {
      t = t * 2.0;
      if (t < 1.0) return -(c*0.5) * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
      t = t - 2.0;
      return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
    } break;
    case eToastEaseInBackTween: {
      float s = 1.70158;
      t = t * 1.0;
      return c*t*t*((s+1.0)*t - s) + b;
    } break;
    case eToastEaseOutBackTween: {
      float s = 1.70158;
      t = t * 1.0 - 1.0;
      return c*(t*t*((s+1.0)*t + s) + 1.0) + b;
    } break;
    case eToastEaseInOutBackTween: {
      float s = 1.70158;
      t = t * 2.0;
      s = s * 1.525;
      if (t < 1.0) return (c/2.0)*(t*t*((s+1.0)*t - s)) + b;
      t = t - 2.0;
      return (c/2.0)*(t*t*((s+1.0)*t + s) + 2.0) + b;
    } break;
    case eToastEaseOutBounceTween: {
      t = t * 1.0;
      if (t < (1.0 / 2.75)) return c*(7.5625*t*t) + b;
      else if (t < (2.0 / 2.75)) {
        t = t - (1.5 / 2.75);
        return c*(7.5625*t*t + 0.75) + b;
      }
      else if (t < (2.5 / 2.75)) {
        t = t - (2.25 / 2.75);
        return c*(7.5625*t*t + 0.9375) + b;
      }
      t = t - (2.625 / 2.75);
      return c*(7.5625*t*t + 0.984375) + b;
    } break;
    case eToastEaseInBounceTween: return c - _toaster_tween_get_value(duration - elapsed, duration, eToastEaseOutBounceTween) + b; break;
    case eToastEaseInOutBounceTween: {
      if (t < (0.5)) return _toaster_tween_get_value(elapsed * 2.0, duration, eToastEaseInBounceTween) * 0.5 + b;
      return (_toaster_tween_get_value(elapsed * 2.0 - duration, duration, eToastEaseOutBounceTween) * 0.5) + (c*0.5) + b;
    } break;
    case eToastEaseInElasticTween: {
      if (t == 0.0) return b;
      t = t * 1.0;
      if (t == 1.0) return b + c;
      float p = duration * 0.3;
      float s = p / 4.0;
      t = t - 1.0;
      return -(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)) + b;
    } break;
    case eToastEaseOutElasticTween: {
      if (t == 0.0) return b;
      t = t * 1.0;
      if (t == 1.0) return b + c;
      float p = duration * 0.3;
      float s = p / 4.0;
      return ((c*Maths.RaiseToPower(2.0, -10.0*t)) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI / p)) + c + b);
    } break;
    case eToastEaseInOutElasticTween: {
      if (t == 0.0) return b;
      t = t * 2.0;
      if (t == 2.0) return b + c;
      float p = duration * (0.3 * 1.5);
      float s = p / 4.0;
      if (t < 1.0) {
        t = t - 1.0;
        return -0.5*(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)) + b;
      }
      t = t - 1.0;
      return c*Maths.RaiseToPower(2.0, -10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)*0.5 + c + b;
    } break;
    default: return duration;
  }
}

float _toaster_lerp(float from, float to, float t) {
  return (from + (to - from) * t);
}




_Toast _toasts[MAX_TOAST];
int _active_toast[MAX_TOAST];
int _toast_count;

int _MAX_TOAST_WIDTH;


void _toaster_toasts_remove_by_index(int index)
{
  int toast_id = _active_toast[index];
  _toasts[toast_id].Available = true;
  _toasts[toast_id].Lifetime = 0;
  _toasts[toast_id].Overlay.Transparency = 100;
  for(int i=index; i<_toast_count-1; i++)
  {
    _active_toast[i] = _active_toast[i+1];
  }
  _toast_count--;
}

void _toaster_toasts_remove_by_id(int toast_id)
{
  int index = 0;
  for(int i=0; i<_toast_count; i++) {
    if(_active_toast[i] == toast_id) {
      index = i;
      break;
    }
  }
  _toaster_toasts_remove_by_index(index);
}


void _toaster_toasts_init()
{
  _toast_count = MAX_TOAST;
  for(int i=0; i<MAX_TOAST; i++)
  {
    _toasts[i].Overlay = Overlay.CreateGraphical(-3180, -3180, 0);
    _active_toast[i] = i;
  }
  for(int i=0; i<MAX_TOAST; i++)
  {
    _toaster_toasts_remove_by_index(0);
  }
}


int _toaster_toasts_get_first_available()
{
  for(int i=0; i<MAX_TOAST; i++)
  {
    if(_toasts[i].Available) {
      return i;
    }
  }
  return -1;  
}

void _toaster_toasts_allocate(int i)
{
  _toasts[i].Available = false;
  _active_toast[_toast_count] = i;
  _toast_count++;
}


void _Toast::Update()
{
  this.Elapsed += _ta_tick;
  if(this.Elapsed > this.Duration) {
    this.Elapsed = 0.0;
    this.Stage++;
    switch(this.Stage) {
      case eToastMiddle: this.Duration = this.TotalDuration/2.0; break;
      case eToastEnd: this.Duration = this.TotalDuration/4.0; break;
    }
  }
  
  if(this.Stage == eToastBegin) {
    float from_tween_y = this.TweenFromY+IntToFloat(this.Overlay.GraphicHeight);
    this.Overlay.Y = FloatToInt(_toaster_lerp(from_tween_y, this.TweenFromY, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseInBackTween)));
    this.Overlay.Transparency = FloatToInt(_toaster_lerp(100.0, 0.0, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseLinearTween)));
  } else if(this.Stage == eToastEnd) {
    float to_tween_y = this.TweenFromY-IntToFloat(this.Overlay.GraphicHeight);
    this.Overlay.Y = FloatToInt(_toaster_lerp(this.TweenFromY, to_tween_y, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseInBackTween)));
    this.Overlay.Transparency = FloatToInt(_toaster_lerp(0.0, 100.0, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseLinearTween)));    
  }
}

void _toaster_toasts_update()
{
  for(int i=0; i<_toast_count; i++)
  {
    int toast_id = _active_toast[i];
    _toasts[toast_id].Lifetime--;
    if(_toasts[toast_id].Lifetime <= 0) {
      _toaster_toasts_remove_by_index(i);
    } else {
      _toasts[toast_id].Update();
    }
  }
}


void _toaster_toasts_slide_up(int amount)
{
  for(int i=0; i<_toast_count; i++)
  {
    int toast_id = _active_toast[i];
    _toasts[toast_id].TweenFromY -= IntToFloat(amount);
    _toasts[toast_id].Overlay.Y -= amount;
  }  
}

void _ta_set_game_speed(int value)
{
  _ta_game_speed = IntToFloat(value);
  _ta_tick = 1.0/_ta_game_speed;  
}

void set_GameSpeed(this ToasterAlmighty*, int value)
{ 
  _ta_set_game_speed(value);
}

int get_GameSpeed(this ToasterAlmighty*)
{
  return FloatToInt(_ta_game_speed);
}


void Toaster::Toast(const string sliced_bread)
{
  int bg_color = this.BackgroundColor;
  int font = this.Font;
  int in_margin = 4;
  int out_margin = 4;
  int text_color = 0;
  if(this.BackgroundColor < 31727) text_color = 65535;
  float duration = this.Duration;
  if(duration <= 0.0) duration = 2.0;
  int lifetime = FloatToInt(duration*_ta_game_speed);
  
  int str_width = GetTextWidth(sliced_bread, font);
  if(str_width > _MAX_TOAST_WIDTH) str_width = _MAX_TOAST_WIDTH;
  int str_height = GetTextHeight(sliced_bread, font, str_width);
  int t_width = str_width + 2*in_margin;
  int t_height = str_height + 2*in_margin;
  
  DynamicSprite* spr = DynamicSprite.Create(t_width, t_height);
  DrawingSurface* surf = spr.GetDrawingSurface();
  surf.Clear(bg_color);
  surf.DrawingColor = text_color;
  surf.DrawStringWrapped(in_margin, in_margin, str_width+1, font, eAlignCenter, sliced_bread);
  surf.Release();
  
  int t_id = _toaster_toasts_get_first_available();
  
  System.Log(eLogInfo, "toast_id: %d", t_id);
  
  if(t_id < 0) return;
  
  _toaster_toasts_slide_up(out_margin + t_height);
  
  _toaster_toasts_allocate(t_id);
  
  _toasts[t_id].Sprite = spr;
  int initial_y = Screen.Height - t_height;
  Overlay* ovr = _toasts[t_id].Overlay;
  ovr.Graphic = spr.Graphic;
  ovr.X = Screen.Width - t_width;
  ovr.Y = initial_y;
  ovr.Transparency = 100;
  
  _toasts[t_id].Elapsed = 0.0;
  _toasts[t_id].Stage = eToastBegin;
  _toasts[t_id].TotalDuration = duration;
  _toasts[t_id].Duration = duration/4.0;
  _toasts[t_id].TweenFromY = IntToFloat(initial_y);
  _toasts[t_id].Lifetime = lifetime;  
}

int _last_random;

void Toaster::UtilSetRandomColor()
{
  int r = Random(23);
  if(_last_random == r) r = Random(23);  
  _last_random = r;
  int c = 0;
  switch(r) 
  {
    case 0: c = eToastColor_PaleLemon; break;
    case 1: c = eToastColor_DarkPlum; break;
    case 2: c = eToastColor_DeepBurgundy; break;
    case 3: c = eToastColor_RichBurgundy; break;
    case 4: c = eToastColor_RosyMauve; break;
    case 5: c = eToastColor_DeepRose; break;
    case 6: c = eToastColor_RaspberryRed; break;
    case 7: c = eToastColor_TomatoRed; break;
    case 8: c = eToastColor_Coral; break;
    case 9: c = eToastColor_Apricot; break;
    case 10: c = eToastColor_Goldenrod; break;
    case 11: c = eToastColor_PastelLime; break;
    case 12: c = eToastColor_CreamyWhite; break;
    case 13: c = eToastColor_FreshGreen; break;
    case 14: c = eToastColor_MintyGreen; break;
    case 15: c = eToastColor_LightLime; break;
    case 16: c = eToastColor_LimeGreen; break;
    case 17: c = eToastColor_Teal; break;
    case 18: c = eToastColor_Aqua; break;
    case 19: c = eToastColor_SteelBlue; break;
    case 20: c = eToastColor_DeepSkyBlue; break;
    case 21: c = eToastColor_RoyalBlue; break;
    case 22: c = eToastColor_NavyBlue; break;
    case 23: c = eToastColor_MidnightBlack; break;    
  }
  this.BackgroundColor = c;
}

void game_start()
{
  SetGameSpeed(60);
  _MAX_TOAST_WIDTH = (Screen.Width * 800) / 1000;
  _toaster_toasts_init();
  _ta_set_game_speed(GetGameSpeed());
}

void repeatedly_execute_always()
{
  _toaster_toasts_update();
}