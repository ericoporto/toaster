// Toaster Module Script
//
// Version 0.1.0

// MIT License
// 
// Copyright (c) 2023 Ã‰rico Vieira Porto 
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

float _ta_game_speed;
float _ta_tick;

#ifndef MAX_TOAST
#define MAX_TOAST 16
#endif

#define TSTR_HALF_PI 1.570796327
#define TSTR_DOUBLE_PI 6.283185307

int _MAX_TOAST_WIDTH;

enum _ToastStage {
  eToastBegin = 0, 
  eToastMiddle, 
  eToastEnd
};

struct _Toast {
  bool Available;
  Overlay* Overlay;
  DynamicSprite* Sprite;
  int Lifetime;
  float Width;
  float Height;
  float Elapsed;
  float Duration;
  float TotalDuration;
  float TweenFromY;
  float SlideUpElapsed;
  float SlideUpAmount;
  float SlideUpDuration;
  float SlideUpAmountCurrent;
  int X;
  int Y;
  eToastTweenEasingType SlideInEasing;
  eToastTweenEasingType SlideOutEasing;
  _ToastStage Stage;
  import void Update();
};

_Toast _toasts[MAX_TOAST];
int _active_toast[MAX_TOAST];
int _toast_count;

int NormalizeAngleDegrees(int theta)
{
  if(theta == 0) return 0;
  if(theta >= 1 && theta <= 359) return theta;
  if(theta <= -1) return theta + 360;
  return theta - 360;
}

DynamicSprite* _toaster_create_sprite_from_textgui(
    TextWindowGUI* aTextWindowGUI, 
    int width, 
    int height){
      
  DynamicSprite* bgsprite = DynamicSprite.Create(width, height, true);
  DrawingSurface* bgsurf= bgsprite.GetDrawingSurface();
  //sierraSurface.Clear();
  
  Button* gc_edge0 = aTextWindowGUI.Controls[0].AsButton;
  Button* gc_edge1 = aTextWindowGUI.Controls[1].AsButton;
  Button* gc_edge2 = aTextWindowGUI.Controls[2].AsButton;
  Button* gc_edge3 = aTextWindowGUI.Controls[3].AsButton;
  Button* gc_edge4 = aTextWindowGUI.Controls[4].AsButton;
  Button* gc_edge5 = aTextWindowGUI.Controls[5].AsButton;
  Button* gc_edge6 = aTextWindowGUI.Controls[6].AsButton;
  Button* gc_edge7 = aTextWindowGUI.Controls[7].AsButton;

  //draw background
  if(aTextWindowGUI.BackgroundGraphic != 0) {
    bgsurf.DrawImage(
    /*x*/ Game.SpriteWidth[gc_edge0.NormalGraphic], 
    /*y*/ Game.SpriteHeight[gc_edge0.NormalGraphic],
    /*sprite*/ aTextWindowGUI.BackgroundGraphic,
    /*transparent*/ 0,
    /*width*/ width-Game.SpriteWidth[gc_edge0.NormalGraphic]-Game.SpriteWidth[gc_edge3.NormalGraphic], 
    /*height*/ height-Game.SpriteHeight[gc_edge0.NormalGraphic]-Game.SpriteHeight[gc_edge3.NormalGraphic]
    );
  } else {
    bgsurf.DrawingColor = aTextWindowGUI.BackgroundColor;
    bgsurf.DrawRectangle(
    /*x1*/ Game.SpriteWidth[gc_edge0.NormalGraphic], 
    /*y1*/ Game.SpriteHeight[gc_edge0.NormalGraphic],
    /*x2*/ Game.SpriteWidth[gc_edge0.NormalGraphic]+width-Game.SpriteWidth[gc_edge3.NormalGraphic], 
    /*y2*/ Game.SpriteHeight[gc_edge0.NormalGraphic]+height-Game.SpriteHeight[gc_edge3.NormalGraphic]
    );
  }

  // Top Left Corner
  bgsurf.DrawImage(
  /*x*/ 0, 
  /*y*/ 0, 
  /*sprite*/ gc_edge0.NormalGraphic
  );

  // Top Right Corner
  bgsurf.DrawImage(
  /*x*/ width-Game.SpriteWidth[gc_edge2.NormalGraphic],
  /*y*/ 0, 
  /*sprite*/ gc_edge2.NormalGraphic
  );

  // Bottom Left Corner
  bgsurf.DrawImage(
  /*x*/ 0, 
  /*y*/ height-Game.SpriteHeight[gc_edge1.NormalGraphic],  
  /*sprite*/ gc_edge1.NormalGraphic
  );

  // Bottom Right Corner
  bgsurf.DrawImage(
  /*x*/ width-Game.SpriteWidth[gc_edge3.NormalGraphic], 
  /*y*/ height-Game.SpriteHeight[gc_edge3.NormalGraphic], 
  /*sprite*/ gc_edge3.NormalGraphic
  );

  // Top Edge
  bgsurf.DrawImage(
  /*x*/ Game.SpriteWidth[gc_edge0.NormalGraphic], 
  /*y*/ 0,
  /*sprite*/ gc_edge6.NormalGraphic, 
  /*transparent*/ 0,
  /*width*/ width-Game.SpriteWidth[gc_edge0.NormalGraphic]-Game.SpriteWidth[gc_edge2.NormalGraphic],
  /*height*/ Game.SpriteHeight[gc_edge6.NormalGraphic]
  );
    
  // Left Edge
  bgsurf.DrawImage(
  /*x*/ 0, 
  /*y*/ Game.SpriteHeight[gc_edge0.NormalGraphic],
  /*sprite*/ gc_edge4.NormalGraphic, 
  /*transparent*/ 0,
  /*width*/ Game.SpriteWidth[gc_edge4.NormalGraphic],
  /*height*/ height-Game.SpriteHeight[gc_edge0.NormalGraphic]-Game.SpriteHeight[gc_edge1.NormalGraphic]
  );
  
  // Right Edge
  bgsurf.DrawImage(
  /*x*/ width-Game.SpriteWidth[gc_edge5.NormalGraphic],
  /*y*/ Game.SpriteHeight[gc_edge2.NormalGraphic],
  /*sprite*/ gc_edge5.NormalGraphic, 
  /*transparent*/ 0,
  /*width*/ Game.SpriteWidth[gc_edge5.NormalGraphic], 
  /*height*/ height-Game.SpriteHeight[gc_edge2.NormalGraphic]-Game.SpriteHeight[gc_edge3.NormalGraphic]
  );

  // Bottom Edge
  bgsurf.DrawImage(
  /*x*/ Game.SpriteWidth[gc_edge1.NormalGraphic], 
  /*y*/ height-Game.SpriteHeight[gc_edge7.NormalGraphic],
  /*sprite*/ gc_edge7.NormalGraphic, 
  /*transparent*/ 0,
  /*width*/ width-Game.SpriteWidth[gc_edge1.NormalGraphic]-Game.SpriteWidth[gc_edge3.NormalGraphic], 
  /*height*/ Game.SpriteHeight[gc_edge7.NormalGraphic]
  );
  
  bgsurf.Release();
  return bgsprite;
}

// Below easing equations are based on the port from AGS Tween from Edmundito, but refactored for simplicity.
//
// Copyright (c) 2009-present Edmundo Ruiz Ghanem
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// TERMS OF USE - EASING EQUATIONS
//
// Open source under the BSD License.
//
// Copyright (c) 2001 Robert Penner
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//  * Redistributions of source code must retain the above copyright notice, this
//    list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright notice,
//    this list of conditions and the following disclaimer in the documentation
//    and/or other materials provided with the distribution.
//  * Neither the name of the author nor the names of contributors may be used to
//    endorse or promote products derived from this software without
//    specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

float _toaster_tween_get_value(float elapsed, float duration, eToastTweenEasingType easingType) {
  float t = elapsed / duration;
  float b = 0.0;
  float c = 1.0;
  
  switch(easingType) {
    case eToastEaseLinearTween: return t; break;
    case eToastEaseInSineTween: return -c * Maths.Cos((t) * TSTR_HALF_PI) + c + b; break;
    case eToastEaseOutSineTween: return c * Maths.Sin((t) * TSTR_HALF_PI) + b; break;
    case eToastEaseInOutSineTween: return (-c*0.5) * (Maths.Cos(Maths.Pi*(t)) -1.0) + b; break;
    case eToastEaseInCubicTween: return c*Maths.RaiseToPower(t, 3.0) + b; break;
    case eToastEaseOutCubicTween: {
      float s = 1.0;
      if (FloatToInt(3.0, eRoundDown) % 2 == 0) {
        c = -c;
        s = -s;
      }
      t = t - 1.0;
      return c*(Maths.RaiseToPower(t, 3.0) + s) + b;
    } break;
    case eToastEaseInOutCubicTween: {
      t = t * 2.0;
      if (t < 1.0) return (c*0.5)*Maths.RaiseToPower(t, 3.0) + b;
      float s = 2.0;
      if (FloatToInt(3.0, eRoundDown) % 2 == 0) {
        c = -c;
        s = -2.0;
      }
      return (c*0.5)*(Maths.RaiseToPower(t - 2.0, 3.0) + s) + b;
    } break;
    case eToastEaseInQuadTween: return c*t*t + b; break;
    case eToastEaseOutQuadTween: t = t - 1.0; return -c*t*(t-2.0) + b; break;
    case eToastEaseInOutQuadTween: {
      t = t * 2.0;
      if (t < 1.0) return (c*0.5)*t*t + b;
      t = t - 1.0;
      return -(c*0.5)*(t*(t-2.0) - 1.0) + b;
    } break;
    case eToastEaseInExpoTween: {
      if (t == 0.0) return b;
      return c * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
    } break;
    case eToastEaseOutExpoTween: {
      if (t == 1.0) return b + c;
      return c * (-Maths.RaiseToPower(2.0, -10.0 * t) + 1.0) + b;
    } break;
    case eToastEaseInOutExpoTween: {
      if (t == 0.0) return b;
      if (t == 1.0) return b + c;
      t = t * 2.0;
      if (t < 1.0) return (c*0.5) * Maths.RaiseToPower(2.0, 10.0 * (t - 1.0)) + b;
      t = t - 1.0;
      return (c*0.5) * (-Maths.RaiseToPower(2.0, -10.0 * t) + 2.0) + b;
    } break;
    case eToastEaseInCircTween: {
      t = t * 2.0;
      if (t < 1.0) return -c * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
      t = t - 2.0;
      return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
    } break;
    case eToastEaseOutCircTween: {
      t = t * 2.0 - 1.0;
      return c * Maths.Sqrt(1.0 - t*t) + b;
    } break;
    case eToastEaseInOutCircTween: {
      t = t * 2.0;
      if (t < 1.0) return -(c*0.5) * (Maths.Sqrt(1.0 - t*t) - 1.0) + b;
      t = t - 2.0;
      return (c*0.5) * (Maths.Sqrt(1.0 - t*t) + 1.0) + b;
    } break;
    case eToastEaseInBackTween: {
      float s = 1.70158;
      t = t * 1.0;
      return c*t*t*((s+1.0)*t - s) + b;
    } break;
    case eToastEaseOutBackTween: {
      float s = 1.70158;
      t = t * 1.0 - 1.0;
      return c*(t*t*((s+1.0)*t + s) + 1.0) + b;
    } break;
    case eToastEaseInOutBackTween: {
      float s = 1.70158;
      t = t * 2.0;
      s = s * 1.525;
      if (t < 1.0) return (c/2.0)*(t*t*((s+1.0)*t - s)) + b;
      t = t - 2.0;
      return (c/2.0)*(t*t*((s+1.0)*t + s) + 2.0) + b;
    } break;
    case eToastEaseOutBounceTween: {
      t = t * 1.0;
      if (t < (1.0 / 2.75)) return c*(7.5625*t*t) + b;
      else if (t < (2.0 / 2.75)) {
        t = t - (1.5 / 2.75);
        return c*(7.5625*t*t + 0.75) + b;
      }
      else if (t < (2.5 / 2.75)) {
        t = t - (2.25 / 2.75);
        return c*(7.5625*t*t + 0.9375) + b;
      }
      t = t - (2.625 / 2.75);
      return c*(7.5625*t*t + 0.984375) + b;
    } break;
    case eToastEaseInBounceTween: return c - _toaster_tween_get_value(duration - elapsed, duration, eToastEaseOutBounceTween) + b; break;
    case eToastEaseInOutBounceTween: {
      if (t < (0.5)) return _toaster_tween_get_value(elapsed * 2.0, duration, eToastEaseInBounceTween) * 0.5 + b;
      return (_toaster_tween_get_value(elapsed * 2.0 - duration, duration, eToastEaseOutBounceTween) * 0.5) + (c*0.5) + b;
    } break;
    case eToastEaseInElasticTween: {
      if (t == 0.0) return b;
      t = t * 1.0;
      if (t == 1.0) return b + c;
      float p = duration * 0.3;
      float s = p / 4.0;
      t = t - 1.0;
      return -(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)) + b;
    } break;
    case eToastEaseOutElasticTween: {
      if (t == 0.0) return b;
      t = t * 1.0;
      if (t == 1.0) return b + c;
      float p = duration * 0.3;
      float s = p / 4.0;
      return ((c*Maths.RaiseToPower(2.0, -10.0*t)) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI / p)) + c + b);
    } break;
    case eToastEaseInOutElasticTween: {
      if (t == 0.0) return b;
      t = t * 2.0;
      if (t == 2.0) return b + c;
      float p = duration * (0.3 * 1.5);
      float s = p / 4.0;
      if (t < 1.0) {
        t = t - 1.0;
        return -0.5*(c*Maths.RaiseToPower(2.0, 10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)) + b;
      }
      t = t - 1.0;
      return c*Maths.RaiseToPower(2.0, -10.0*t) * Maths.Sin(((t*duration - s)*TSTR_DOUBLE_PI) / p)*0.5 + c + b;
    } break;
    default: return duration;
  }
}

float _toaster_lerp(float from, float to, float t) {
  return (from + (to - from) * t);
}

void _toaster_toasts_remove_by_index(int index)
{
  int toast_id = _active_toast[index];
  _toasts[toast_id].Available = true;
  _toasts[toast_id].Lifetime = 0;
  _toasts[toast_id].Overlay.Transparency = 100;
  _toasts[toast_id].Sprite = null;
  for(int i=index; i<_toast_count-1; i++)
  {
    _active_toast[i] = _active_toast[i+1];
  }
  _toast_count--;
}

void _toaster_toasts_remove_by_id(int toast_id)
{
  int index = 0;
  for(int i=0; i<_toast_count; i++) {
    if(_active_toast[i] == toast_id) {
      index = i;
      break;
    }
  }
  _toaster_toasts_remove_by_index(index);
}


void _toaster_toasts_init()
{
  _toast_count = MAX_TOAST;
  for(int i=0; i<MAX_TOAST; i++)
  {
    _toasts[i].Overlay = Overlay.CreateGraphical(-3180, -3180, 0);
    _active_toast[i] = i;
  }
  for(int i=0; i<MAX_TOAST; i++)
  {
    _toaster_toasts_remove_by_index(0);
  }
}


int _toaster_toasts_get_first_available()
{
  for(int i=0; i<MAX_TOAST; i++)
  {
    if(_toasts[i].Available) {
      return i;
    }
  }
  return -1;  
}

void _toaster_toasts_allocate(int i)
{
  _toasts[i].Available = false;
  _active_toast[_toast_count] = i;
  _toast_count++;
}


void _Toast::Update()
{
  this.Elapsed += _ta_tick;
  if(this.Elapsed > this.Duration) {
    this.Elapsed = 0.0;
    this.Stage++;
    switch(this.Stage) {
      case eToastBegin: this.Duration = this.TotalDuration/4.0; break;
      case eToastMiddle: this.Duration = this.TotalDuration/2.0; break;
      case eToastEnd: this.Duration = this.TotalDuration/4.0; break;
    }
  }
  
  if(this.SlideUpElapsed < this.SlideUpDuration) {
    this.SlideUpElapsed += _ta_tick;
    this.SlideUpAmountCurrent = _toaster_lerp(0.0, this.SlideUpAmount, _toaster_tween_get_value(this.SlideUpElapsed, this.SlideUpDuration, eToastEaseLinearTween));
  }
  
  if(this.Stage == eToastBegin) {
    float from_tween_y = this.TweenFromY+this.Height;
    this.Overlay.Y = FloatToInt(this.SlideUpAmountCurrent) + FloatToInt(_toaster_lerp(from_tween_y, this.TweenFromY, _toaster_tween_get_value(this.Elapsed, this.Duration, this.SlideInEasing)));
    this.Overlay.Transparency = FloatToInt(_toaster_lerp(100.0, 0.0, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseLinearTween)));
    
    float half_dur = this.Duration/2.0;
    if(this.Elapsed <= half_dur) {
      this.Overlay.Width = FloatToInt( _toaster_lerp(1.0, this.Width, _toaster_tween_get_value(this.Elapsed, half_dur, eToastEaseLinearTween)));
      this.Overlay.X = this.X + FloatToInt(this.Width)/2 - this.Overlay.Width/2;
      this.Overlay.Height = FloatToInt( _toaster_lerp(1.0, this.Height, _toaster_tween_get_value(this.Elapsed, half_dur, eToastEaseLinearTween)));
    }
  } else if(this.Stage == eToastMiddle) {
    this.Overlay.Y = FloatToInt(this.SlideUpAmountCurrent + this.TweenFromY);
    this.Overlay.Transparency = 0;
    this.Overlay.Width = FloatToInt(this.Width);
     this.Overlay.Height = FloatToInt(this.Height);
    this.Overlay.X = this.X;
  } else if(this.Stage == eToastEnd) {
    float to_tween_y = this.TweenFromY-this.Height;
    this.Overlay.Y = FloatToInt(this.SlideUpAmountCurrent) + FloatToInt(_toaster_lerp(this.TweenFromY, to_tween_y, _toaster_tween_get_value(this.Elapsed, this.Duration, this.SlideOutEasing)));
    this.Overlay.Transparency = FloatToInt(_toaster_lerp(0.0, 100.0, _toaster_tween_get_value(this.Elapsed, this.Duration, eToastEaseLinearTween)));
    
    float half_dur = this.Duration/2.0;
    if(this.Elapsed >= half_dur) {
      float elapsed = this.Elapsed - half_dur;
      this.Overlay.Width = FloatToInt(_toaster_lerp(this.Width, 1.0, _toaster_tween_get_value(elapsed, half_dur, eToastEaseLinearTween))); 
      this.Overlay.X = this.X + FloatToInt(this.Width)/2 - this.Overlay.Width/2;
      this.Overlay.Height = FloatToInt( _toaster_lerp(this.Height, 1.0, _toaster_tween_get_value(elapsed, half_dur, eToastEaseLinearTween)));
    }
  } 
}

void _toaster_toasts_update()
{
  for(int i=0; i<_toast_count; i++)
  {
    int toast_id = _active_toast[i];
    _toasts[toast_id].Lifetime--;
    if(_toasts[toast_id].Lifetime <= 0) {
      _toaster_toasts_remove_by_index(i);
    } else {
      _toasts[toast_id].Update();
    }
  }
}

void _toaster_toasts_slide_up(int amount)
{
  for(int i=0; i<_toast_count; i++)
  {
    int toast_id = _active_toast[i];
    _toasts[toast_id].SlideUpAmount -= IntToFloat(amount);
    _toasts[toast_id].SlideUpDuration += _ta_tick * 4.0;
  }  
}

void _ta_set_game_speed(int value)
{
  _ta_game_speed = IntToFloat(value);
  _ta_tick = 1.0/_ta_game_speed;  
}

void set_GameSpeed(this ToasterAlmighty*, int value)
{ 
  _ta_set_game_speed(value);
}

int get_GameSpeed(this ToasterAlmighty*)
{
  return FloatToInt(_ta_game_speed);
}


void Toaster::Toast(const string sliced_bread)
{
  int t_id = _toaster_toasts_get_first_available();
    
  if(t_id < 0) return;
  
  eToastTweenEasingType slide_in_ease = this.SlideInEasing;
  eToastTweenEasingType slide_out_ease = this.SlideOutEasing;
  TextWindowGUI* text_window_gui = this.TextWindowGUI;
  float rotation = this.Rotation;
  int bg_color = this.BackgroundColor;
  if(text_window_gui != null) {
    bg_color = text_window_gui.BackgroundColor;
    if(text_window_gui.BackgroundGraphic != 0) {
      DynamicSprite* spr = DynamicSprite.CreateFromExistingSprite(text_window_gui.BackgroundGraphic);
      DrawingSurface* tg_srf = spr.GetDrawingSurface();
      bg_color = tg_srf.GetPixel(spr.Width/2, spr.Height/2);
      tg_srf.Release();
    }
  }
  int font = this.Font;
  float duration = this.Duration;
  
  int in_margin = 6;
  int out_margin = 4;
  int text_color = 0;
  
  if(bg_color < 31727) text_color = 65535;
  if(slide_in_ease == 0) slide_in_ease = eToastEaseInBackTween;
  if(slide_out_ease == 0) slide_out_ease = eToastEaseInBackTween;
  if(duration <= 0.0) duration = 2.25;
  int lifetime = FloatToInt(duration*_ta_game_speed);
  
  int str_width = GetTextWidth(sliced_bread, font)+1;
  if(str_width > _MAX_TOAST_WIDTH) str_width = _MAX_TOAST_WIDTH;
  int str_height = GetTextHeight(sliced_bread, font, str_width);
  int t_width = str_width + 2*in_margin;
  int t_height = str_height + 2*in_margin;
  
  DynamicSprite* spr = DynamicSprite.Create(t_width, t_height);
  DrawingSurface* surf = spr.GetDrawingSurface();
  if(this.TextWindowGUI == null) {
    surf.Clear(bg_color);
  } else {
    DynamicSprite* txt_gui = _toaster_create_sprite_from_textgui(text_window_gui, t_width, t_height);
    surf.DrawImage(0, 0, txt_gui.Graphic);
  }
  surf.DrawingColor = text_color;
  surf.DrawStringWrapped(in_margin, in_margin, str_width, font, eAlignCenter, sliced_bread);
  surf.Release();
  
  if(rotation != 0.0) {
    spr.Rotate(NormalizeAngleDegrees(FloatToInt(rotation)));
    t_width = spr.Width;
    t_height = spr.Height;
  }  
  
  _toaster_toasts_slide_up(out_margin + t_height);
  
  _toaster_toasts_allocate(t_id);
  
  _toasts[t_id].Sprite = spr;
  int initial_y = Screen.Height - t_height - out_margin;
  Overlay* ovr = _toasts[t_id].Overlay;
  ovr.Graphic = spr.Graphic;
  ovr.X = Screen.Width - t_width;
  ovr.Y = initial_y;
  ovr.Transparency = 100;  
  
  _toasts[t_id].Elapsed = 0.0;
  _toasts[t_id].Stage = eToastBegin;
  _toasts[t_id].TotalDuration = duration;
  _toasts[t_id].Duration = duration/4.0;
  _toasts[t_id].TweenFromY = IntToFloat(initial_y);
  _toasts[t_id].Lifetime = lifetime;
  _toasts[t_id].SlideInEasing = slide_in_ease;
  _toasts[t_id].SlideOutEasing = slide_out_ease;
  _toasts[t_id].SlideUpAmountCurrent = 0.0;
  _toasts[t_id].SlideUpAmount = 0.0;
  _toasts[t_id].SlideUpElapsed = 0.0;
  _toasts[t_id].SlideUpDuration = 0.0;
  _toasts[t_id].Width = IntToFloat(t_width);
  _toasts[t_id].Height = IntToFloat(t_height);
  _toasts[t_id].X = ovr.X;
  _toasts[t_id].Y = ovr.Y;
}

int _last_random;

void Toaster::SetRandomColor()
{
  int r = Random(23);
  if(_last_random == r) r = Random(23);  
  _last_random = r;
  int c = 0;
  switch(r) 
  {
    case 0: c = eToastColor_PaleLemon; break;
    case 1: c = eToastColor_DarkPlum; break;
    case 2: c = eToastColor_DeepBurgundy; break;
    case 3: c = eToastColor_RichBurgundy; break;
    case 4: c = eToastColor_RosyMauve; break;
    case 5: c = eToastColor_DeepRose; break;
    case 6: c = eToastColor_RaspberryRed; break;
    case 7: c = eToastColor_TomatoRed; break;
    case 8: c = eToastColor_Coral; break;
    case 9: c = eToastColor_Apricot; break;
    case 10: c = eToastColor_Goldenrod; break;
    case 11: c = eToastColor_PastelLime; break;
    case 12: c = eToastColor_CreamyWhite; break;
    case 13: c = eToastColor_FreshGreen; break;
    case 14: c = eToastColor_MintyGreen; break;
    case 15: c = eToastColor_LightLime; break;
    case 16: c = eToastColor_LimeGreen; break;
    case 17: c = eToastColor_Teal; break;
    case 18: c = eToastColor_Aqua; break;
    case 19: c = eToastColor_SteelBlue; break;
    case 20: c = eToastColor_DeepSkyBlue; break;
    case 21: c = eToastColor_RoyalBlue; break;
    case 22: c = eToastColor_NavyBlue; break;
    case 23: c = eToastColor_MidnightBlack; break;    
  }
  this.BackgroundColor = c;
}

void Toaster::SetRandomSmallRotation()
{
  int rnd_angle = -8 + Random(16);
  if(rnd_angle == 0) rnd_angle = 1;
  int rotation = NormalizeAngleDegrees(rnd_angle);
  this.Rotation = IntToFloat(rotation);
}

void game_start()
{
  SetGameSpeed(60);
  _MAX_TOAST_WIDTH = (Screen.Width * 800) / 1000;
  _toaster_toasts_init();
  _ta_set_game_speed(GetGameSpeed());
}

void repeatedly_execute_always()
{
  _toaster_toasts_update();
}